[gcode_macro PARK]
description: Go to a parked position.
    USAGE: PARK [P=<0|1|2>]
gcode:
    {% set globals = printer["gcode_macro _globals"] %}
    {% set position = printer.gcode_move.gcode_position %}

    {% set P = (params.P|default(2))|int %} # default 2, always raise
    {% set X = globals.park_pos[0] %}
    {% set Y = globals.park_pos[1] %}
    {% set Z = globals.park_pos[2] %}
    {% set travelSpeed = globals.travel_speed %}
    {% set currentZ = position.z %}

    # Calculate Z
    {% if P == 0 %}
        # Absolute move to Z if below Z target
        {% if currentZ > Z %}
            {% set Z = currentZ %} # current is higher, so don't move z
        {% endif %}
    {% elif P == 1 %}
        # Move to Z, but forbid moving down if print is in progress
        {% if currentZ > Z  and printer.virtual_sdcard.is_active %}
            { action_respond_info("Park with P=1 is attemping to down with print in progress, using P=1 Behavior.") }
            {% set Z = currentZ %}
        {% endif %}
    {% elif P == 2 %}
        # Move up by Z
        {% set Z = Z + currentZ %}
    {% else %}
        { action_raise_error("Invalid parameter P=%i. Value must be 0, 1, or 2." | format(P)) }
    {% endif %}

    # Limit Z to max
    {% set Z = ((Z, printer.toolhead.axis_maximum.z)|min, printer.toolhead.axis_minimum.z)|max %}

    # Check Home
    {% if printer.toolhead.homed_axes != "xyz" %}
        { action_raise_error("Must home first.") }
    {% endif %}

    # Move if needed
    {% if P != 2 or X != position.x or Y != position.y or Z < currentZ %}
        SAVE_GCODE_STATE NAME=PARK_STATE
        G90
        G0 X{X} Y{Y} Z{Z} F{travelSpeed}
        RESTORE_GCODE_STATE NAME=PARK_STATE
    {% endif %}

[gcode_macro G27]
description: Parks the toolhead.
    Usage: G27 [P=<0|1|2>]
gcode:
    PARK P={params.P|default(2)}
